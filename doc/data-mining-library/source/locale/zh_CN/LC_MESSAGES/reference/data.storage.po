# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Orange Data Mining
# This file is distributed under the same license as the Orange Data Mining
# Library package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Orange Data Mining Library 3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-29 15:50+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/reference/data.storage.rst:5
msgid "Data Storage (``storage``)"
msgstr ""

#: ../../source/reference/data.storage.rst:7
msgid ""
":obj:`Orange.data.storage.Storage` is an abstract class representing a "
"data object in which rows represent data instances (examples, in machine "
"learning terminology) and columns represent variables (features, "
"attributes, classes, targets, meta attributes)."
msgstr ""

#: ../../source/reference/data.storage.rst:12
msgid ""
"Data is divided into three parts that represent independent variables "
"(`X`), dependent variables (`Y`) and meta data (`metas`). If practical, "
"the class should expose those parts as properties. In the associated "
"domain (:obj:`Orange.data.Domain`), the three parts correspond to lists "
"of variable descriptors `attributes`, `class_vars` and `metas`."
msgstr ""

#: ../../source/reference/data.storage.rst:18
msgid ""
"Any of those parts may be missing, dense, sparse or sparse boolean. The "
"difference between the later two is that the sparse data can be seen as a"
" list of pairs (variable, value), while in the latter the variable (item)"
" is present or absent, like in market basket analysis. The actual storage"
" of sparse data depends upon the storage type."
msgstr ""

#: ../../source/reference/data.storage.rst:24
msgid ""
"There is no uniform constructor signature: every derived class provides "
"one or more specific constructors."
msgstr ""

#: ../../source/reference/data.storage.rst:27
msgid ""
"There are currently two derived classes :obj:`Orange.data.Table` and "
":obj:`Orange.data.sql.Table`, the former storing the data in-memory, in "
"numpy objects, and the latter in SQL (currently, only PostreSQL is "
"supported)."
msgstr ""

#: ../../source/reference/data.storage.rst:31
msgid ""
"Derived classes must implement at least the methods for getting rows and "
"the number of instances (`__getitem__` and `__len__`). To make storage "
"fast enough to be practically useful, it must also reimplement a number "
"of filters, preprocessors and aggregators. For instance, method "
"`_filter_values(self, filter)` returns a new storage which only contains "
"the rows that match the criteria given in the filter. "
":obj:`Orange.data.Table` implements an efficient method based on numpy "
"indexing, and :obj:`Orange.data.sql.Table`, which \"stores\" a table as "
"an SQL query, converts the filter into a WHERE clause."
msgstr ""

#: ../../source/reference/data.storage.rst:43
msgid "The domain describing the columns of the data"
msgstr ""

#: ../../source/reference/data.storage.rst:47
msgid "Data access"
msgstr ""

#: ../../source/reference/data.storage.rst:51
msgid "Return one or more rows of the data."
msgstr ""

#: ../../source/reference/data.storage.rst:53
msgid ""
"If the index is an int, e.g. `data[7]`; the corresponding row is returned"
" as an instance of :obj:`~Orange.data.instance.Instance`. Concrete "
"implementations of `Storage` use specific derived classes for instances."
msgstr ""

#: ../../source/reference/data.storage.rst:57
msgid ""
"If the index is a slice or a sequence of ints (e.g. `data[7:10]` or "
"`data[[7, 42, 15]]`, indexing returns a new storage with the selected "
"rows."
msgstr ""

#: ../../source/reference/data.storage.rst:61
msgid ""
"If there are two indices, where the first is an int (a row number) and "
"the second can be interpreted as columns, e.g. `data[3, 5]` or `data[3, "
"'gender']` or `data[3, y]` (where `y` is an instance of "
":obj:`~Orange.data.Variable`), a single value is returned as an instance "
"of :obj:`~Orange.data.Value`."
msgstr ""

#: ../../source/reference/data.storage.rst:67
msgid ""
"In all other cases, the first index should be a row index, a slice or a "
"sequence, and the second index, which represent a set of columns, should "
"be an int, a slice, a sequence or a numpy array. The result is a new "
"storage with a new domain."
msgstr ""

#: ../../source/reference/data.storage.rst:74
msgid "Return the number of data instances (rows)"
msgstr ""

#: ../../source/reference/data.storage.rst:78
msgid "Inspection"
msgstr ""

#: ../../source/reference/data.storage.rst:82
msgid ""
"Indicates whether the attributes, classes and meta attributes are dense "
"(`Storage.DENSE`) or sparse (`Storage.SPARSE`). If they are sparse and "
"all values are 0 or 1, it is marked as (`Storage.SPARSE_BOOL`). The "
"Storage class provides a default DENSE. If the data has no attibutes, "
"classes or meta attributes, the corresponding method should re"
msgstr ""

#: ../../source/reference/data.storage.rst:90
msgid "Filters"
msgstr ""

#: ../../source/reference/data.storage.rst:92
msgid ""
"Storage should define the following methods to optimize the filtering "
"operations as allowed by the underlying data structure. "
":obj:`Orange.data.Table` executes them directly through numpy (or "
"bottleneck or related) methods, while :obj:`Orange.data.sql.Table` "
"appends them to the WHERE clause of the query that defines the data."
msgstr ""

#: ../../source/reference/data.storage.rst:98
msgid ""
"These methods should not be called directly but through the classes "
"defined in :obj:`Orange.data.filter`. Methods in "
":obj:`Orange.data.filter` also provide the slower fallback functions for "
"the functions not defined in the storage."
msgstr ""

#: ../../source/reference/data.storage.rst:104
msgid "Extract rows without undefined values."
msgstr ""

#: ../../source/reference/data.storage.rst
#: Orange.data.storage.Storage._compute_contingency of
msgid "Parameters"
msgstr ""

#: ../../source/reference/data.storage.rst:106
msgid "optional list of columns that are checked for unknowns"
msgstr ""

#: ../../source/reference/data.storage.rst:108
#: ../../source/reference/data.storage.rst:119
#: ../../source/reference/data.storage.rst:133
msgid "invert the selection"
msgstr ""

#: ../../source/reference/data.storage.rst
msgid "Returns"
msgstr ""

#: ../../source/reference/data.storage.rst:110
#: ../../source/reference/data.storage.rst:121
#: ../../source/reference/data.storage.rst:135
#: ../../source/reference/data.storage.rst:145
msgid "a new storage of the same type or :obj:`~Orange.data.Table`"
msgstr ""

#: ../../source/reference/data.storage.rst
msgid "Return type"
msgstr ""

#: ../../source/reference/data.storage.rst:116
msgid ""
"Return rows with known value of the target attribute. If there are "
"multiple classes, all must be defined."
msgstr ""

#: ../../source/reference/data.storage.rst:127
msgid "Select rows based on a value of the given variable."
msgstr ""

#: ../../source/reference/data.storage.rst:129
msgid "the column that is checked"
msgstr ""

#: ../../source/reference/data.storage.rst:131
msgid "the value of the variable"
msgstr ""

#: ../../source/reference/data.storage.rst:141
msgid "Apply a the given filter to the data."
msgstr ""

#: ../../source/reference/data.storage.rst:143
msgid "A filter for selecting the rows"
msgstr ""

#: ../../source/reference/data.storage.rst:150
msgid "Aggregators"
msgstr ""

#: ../../source/reference/data.storage.rst:152
msgid ""
"Similarly to filters, storage classes should provide several methods for "
"fast computation of statistics. These methods are not called directly but"
" by modules within :obj:`Orange.statistics`."
msgstr ""

#: ../../source/reference/data.storage.rst:159
msgid ""
"Compute basic statistics for the specified variables: minimal and maximal"
" value, the mean and a varianca (or a zero placeholder), the number of "
"missing and defined values."
msgstr ""

#: ../../source/reference/data.storage.rst:163
msgid ""
"a list of columns for which the statistics is computed; if `None`, the "
"function computes the data for all variables"
msgstr ""

#: ../../source/reference/data.storage.rst:167
msgid ""
"a flag which tells whether to include meta attributes (applicable only if"
" `columns` is `None`)"
msgstr ""

#: ../../source/reference/data.storage.rst:170
msgid "a flag which tells whether to compute the variance"
msgstr ""

#: ../../source/reference/data.storage.rst:172
msgid ""
"a list with tuple (min, max, mean, variance, #nans, #non-nans) for each "
"variable"
msgstr ""

#: ../../source/reference/data.storage.rst:178
msgid ""
"Compute the distribution for the specified variables. The result is a "
"list of pairs containing the distribution and the number of rows for "
"which the variable value was missing."
msgstr ""

#: ../../source/reference/data.storage.rst:182
msgid ""
"For discrete variables, the distribution is represented as a vector with "
"absolute frequency of each value. For continuous variables, the result is"
" a 2-d array of shape (2, number-of-distinct-values); the first row "
"contains (distinct) values of the variables and the second has their "
"absolute frequencies."
msgstr ""

#: ../../source/reference/data.storage.rst:188
msgid ""
"a list of columns for which the distributions are computed; if `None`, "
"the function runs over all variables"
msgstr ""

#: ../../source/reference/data.storage.rst:192
msgid "a list of distributions"
msgstr ""

#: Orange.data.storage.Storage._compute_contingency:2 of
msgid ""
"Compute contingency matrices for one or more discrete or continuous "
"variables against the specified discrete variable."
msgstr ""

#: Orange.data.storage.Storage._compute_contingency:5 of
msgid ""
"The resulting list  contains a pair for each column variable. The first "
"element contains the contingencies and the second elements gives the "
"distribution of the row variables for instances in which the value of the"
" column variable is missing."
msgstr ""

#: Orange.data.storage.Storage._compute_contingency:10 of
msgid "The format of contingencies returned depends on the variable type:"
msgstr ""

#: Orange.data.storage.Storage._compute_contingency:12 of
msgid ""
"for discrete variables, it is a numpy array, where element (i, j) "
"contains count of rows with i-th value of the row variable and j-th value"
" of the column variable."
msgstr ""

#: Orange.data.storage.Storage._compute_contingency:16 of
msgid ""
"for continuous variables, contingency is a list of two arrays, where the "
"first array contains ordered distinct values of the column_variable and "
"the element (i,j) of the second array contains count of rows with i-th "
"value of the row variable and j-th value of the ordered column variable."
msgstr ""

#: Orange.data.storage.Storage._compute_contingency:22 of
msgid "variables whose values will correspond to columns of contingency matrices"
msgstr ""

#: Orange.data.storage.Storage._compute_contingency:26 of
msgid ""
"a discrete variable whose values will correspond to the rows of "
"contingency matrices"
msgstr ""

